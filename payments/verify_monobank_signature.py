import base64
import hashlib
import ecdsa
import requests
import os
from django.conf import settings


PUBKEY_PATH = os.path.join(settings.BASE_DIR, "monobank_pubkey.pem")


def fetch_monobank_pubkey() -> str:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–æ–≤–∏–π –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –∫–ª—é—á –∑ Monobank API.
    """
    print("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∑ Monobank API...")
    headers = {'X-Token': settings.MONOBANK_TOKEN}
    response = requests.get("https://api.monobank.ua/api/merchant/pubkey", headers=headers, timeout=10)
    response.raise_for_status()
    print("‚úÖ –ù–æ–≤–∏–π –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –æ—Ç—Ä–∏–º–∞–Ω–æ")
    return response.text  # PEM-—Ñ–æ—Ä–º–∞—Ç


def load_cached_pubkey() -> str:
    """
    –ß–∏—Ç–∞—î –∫–µ—à–æ–≤–∞–Ω–∏–π –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –∑ —Ñ–∞–π–ª—É.
    """
    print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–æ–≥–æ –∫–ª—é—á–∞ –∑ —Ñ–∞–π–ª—É: {PUBKEY_PATH}")
    with open(PUBKEY_PATH, "r") as f:
        pem = f.read()
    print("‚úÖ –ö–µ—à–æ–≤–∞–Ω–∏–π –∫–ª—é—á –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    return pem


def save_pubkey(pubkey_pem: str):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á —É —Ñ–∞–π–ª.
    """
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ —É —Ñ–∞–π–ª: {PUBKEY_PATH}")
    with open(PUBKEY_PATH, "w") as f:
        f.write(pubkey_pem)
    print("‚úÖ –ö–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ")


def verify_signature(signature_base64: str, body_bytes: bytes, pubkey_pem: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å webhook –≤—ñ–¥ Monobank.
    """
    print("üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É...")
    try:
        signature_bytes = base64.b64decode(signature_base64)
        pub_key = ecdsa.VerifyingKey.from_pem(pubkey_pem)
        ok = pub_key.verify(signature_bytes, body_bytes, sigdecode=ecdsa.util.sigdecode_der, hashfunc=hashlib.sha256)
        print("‚úÖ –ü—ñ–¥–ø–∏—Å –≤–∞–ª—ñ–¥–Ω–∏–π")
        return ok
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—É: {e}")
        return False


def verify_with_fallback(signature_base64: str, body_bytes: bytes) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å, –∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ ‚Äî –æ–Ω–æ–≤–ª—é—î –∫–ª—é—á —ñ –ø—Ä–æ–±—É—î –∑–Ω–æ–≤—É.
    """
    print("üö¶ –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å—É –∑ –∫–µ—à–æ–≤–∞–Ω–∏–º –∫–ª—é—á–µ–º...")
    try:
        pubkey_pem = load_cached_pubkey()
        if verify_signature(signature_base64, body_bytes, pubkey_pem):
            print("‚úÖ –ü—ñ–¥–ø–∏—Å –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑ –∫–µ—à–æ–≤–∞–Ω–∏–º –∫–ª—é—á–µ–º")
            return True
        else:
            print("‚ö†Ô∏è –ü—ñ–¥–ø–∏—Å –ù–ï –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑ –∫–µ—à–æ–≤–∞–Ω–∏–º –∫–ª—é—á–µ–º")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –∫–µ—à–æ–≤–∞–Ω–∏–º –∫–ª—é—á–µ–º: {e}")

    print("üîÅ –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á —ñ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É...")
    try:
        pubkey_pem = fetch_monobank_pubkey()
        save_pubkey(pubkey_pem)
        if verify_signature(signature_base64, body_bytes, pubkey_pem):
            print("‚úÖ –ü—ñ–¥–ø–∏—Å –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –∫–ª—é—á–µ–º")
            return True
        else:
            print("‚ùå –ü—ñ–¥–ø–∏—Å –ù–ï –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞–≤—ñ—Ç—å –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –∫–ª—é—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –∞–±–æ –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å: {e}")

    return False
